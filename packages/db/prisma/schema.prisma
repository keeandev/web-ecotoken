// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Permission {
    permissionID String     @id @default(cuid())
    domain       UserDomain
    permission   String     @unique
    description  String?    @db.Text
    roles        Role[]

    isDelete Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("permission")
}

enum UserDomain {
    ADMIN
    USER
}

model Role {
    roleID      String       @id @default(cuid())
    domain      UserDomain
    scope       RoleScope    @default(DEFAULT)
    role        String
    description String?      @db.Text
    permissions Permission[]
    sites       Site[]
    adminUsers  AdminUser[]
    users       User[]

    isDelete Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("role")
}

enum RoleScope {
    DEFAULT
    SITE
}

model EcoProject {
    id           String        @id @default(cuid())
    title        String
    url          String
    status       ProjectStatus
    location     String
    outcome      String
    ord          Int
    images       String        @db.Text
    fundAmount   Int
    fundRecieved Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("ecoproject")
}

// model User {
//     id            String  @id @default(cuid())
//     walletAddress String  @unique
//     emailAddress  String? @unique
//     name          String?
//     profileUrl    String?
//     verifier      String?
//     typeOfLogin   String?

//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     site   Site   @relation(fields: [siteID], references: [siteID])
//     siteID String

//     @@index([siteID])
//     @@map("user")
// }

model User {
    id            String  @id @default(cuid())
    firstName     String
    lastName      String?
    username      String  @unique
    password      String
    emailAddress  String  @unique
    walletAddress String? @unique

    isDelete  Boolean @default(false)
    isDisable Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    site   Site   @relation(fields: [siteID], references: [siteID])
    siteID String
    Role   Role   @relation(fields: [roleID], references: [roleID])
    roleID String

    @@unique([firstName, lastName])
    @@index([siteID])
    @@index([roleID])
    @@map("user")
}

enum ProjectStatus {
    PENDING
    COMPLETE
    FUNDED
    OPEN
}

model AdminUser {
    adminID   String    @id @default(cuid())
    username  String    @unique
    password  String
    email     String
    firstName String
    lastName  String?
    lastLogin DateTime?
    expireAt  DateTime?
    hits      Int       @default(0)

    role   Role   @relation(fields: [roleID], references: [roleID])
    roleID String

    isActive Boolean @default(true)
    isDelete Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([roleID])
    @@map("admin_user")
}

model Site {
    siteID      String  @id @default(cuid())
    siteName    String
    legalName   String?
    mailAddress String?
    prodUrl     String? @unique
    stageUrl    String? @unique
    devUrl      String? @unique

    isDelete Boolean @default(false)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    users User[]
    roles Role[]

    @@map("site")
}
